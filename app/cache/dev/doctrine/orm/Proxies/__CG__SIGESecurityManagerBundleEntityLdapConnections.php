<?php

namespace Proxies\__CG__\SIGE\SecurityManagerBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class LdapConnections extends \SIGE\SecurityManagerBundle\Entity\LdapConnections implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'SIGE\\SecurityManagerBundle\\Entity\\LdapConnections' . "\0" . 'id', '' . "\0" . 'SIGE\\SecurityManagerBundle\\Entity\\LdapConnections' . "\0" . 'ldapname', '' . "\0" . 'SIGE\\SecurityManagerBundle\\Entity\\LdapConnections' . "\0" . 'host', '' . "\0" . 'SIGE\\SecurityManagerBundle\\Entity\\LdapConnections' . "\0" . 'port', '' . "\0" . 'SIGE\\SecurityManagerBundle\\Entity\\LdapConnections' . "\0" . 'account', '' . "\0" . 'SIGE\\SecurityManagerBundle\\Entity\\LdapConnections' . "\0" . 'password', '' . "\0" . 'SIGE\\SecurityManagerBundle\\Entity\\LdapConnections' . "\0" . 'basedn', '' . "\0" . 'SIGE\\SecurityManagerBundle\\Entity\\LdapConnections' . "\0" . 'username', '' . "\0" . 'SIGE\\SecurityManagerBundle\\Entity\\LdapConnections' . "\0" . 'name', '' . "\0" . 'SIGE\\SecurityManagerBundle\\Entity\\LdapConnections' . "\0" . 'surname', '' . "\0" . 'SIGE\\SecurityManagerBundle\\Entity\\LdapConnections' . "\0" . 'email', '' . "\0" . 'SIGE\\SecurityManagerBundle\\Entity\\LdapConnections' . "\0" . 'user');
        }

        return array('__isInitialized__', '' . "\0" . 'SIGE\\SecurityManagerBundle\\Entity\\LdapConnections' . "\0" . 'id', '' . "\0" . 'SIGE\\SecurityManagerBundle\\Entity\\LdapConnections' . "\0" . 'ldapname', '' . "\0" . 'SIGE\\SecurityManagerBundle\\Entity\\LdapConnections' . "\0" . 'host', '' . "\0" . 'SIGE\\SecurityManagerBundle\\Entity\\LdapConnections' . "\0" . 'port', '' . "\0" . 'SIGE\\SecurityManagerBundle\\Entity\\LdapConnections' . "\0" . 'account', '' . "\0" . 'SIGE\\SecurityManagerBundle\\Entity\\LdapConnections' . "\0" . 'password', '' . "\0" . 'SIGE\\SecurityManagerBundle\\Entity\\LdapConnections' . "\0" . 'basedn', '' . "\0" . 'SIGE\\SecurityManagerBundle\\Entity\\LdapConnections' . "\0" . 'username', '' . "\0" . 'SIGE\\SecurityManagerBundle\\Entity\\LdapConnections' . "\0" . 'name', '' . "\0" . 'SIGE\\SecurityManagerBundle\\Entity\\LdapConnections' . "\0" . 'surname', '' . "\0" . 'SIGE\\SecurityManagerBundle\\Entity\\LdapConnections' . "\0" . 'email', '' . "\0" . 'SIGE\\SecurityManagerBundle\\Entity\\LdapConnections' . "\0" . 'user');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (LdapConnections $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', array($id));

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setLdapname($ldapname)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLdapname', array($ldapname));

        return parent::setLdapname($ldapname);
    }

    /**
     * {@inheritDoc}
     */
    public function getLdapname()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLdapname', array());

        return parent::getLdapname();
    }

    /**
     * {@inheritDoc}
     */
    public function setHost($host)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHost', array($host));

        return parent::setHost($host);
    }

    /**
     * {@inheritDoc}
     */
    public function getHost()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHost', array());

        return parent::getHost();
    }

    /**
     * {@inheritDoc}
     */
    public function setPort($port)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPort', array($port));

        return parent::setPort($port);
    }

    /**
     * {@inheritDoc}
     */
    public function getPort()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPort', array());

        return parent::getPort();
    }

    /**
     * {@inheritDoc}
     */
    public function setAccount($account)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAccount', array($account));

        return parent::setAccount($account);
    }

    /**
     * {@inheritDoc}
     */
    public function getAccount()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAccount', array());

        return parent::getAccount();
    }

    /**
     * {@inheritDoc}
     */
    public function setPassword($password)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPassword', array($password));

        return parent::setPassword($password);
    }

    /**
     * {@inheritDoc}
     */
    public function getPassword()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPassword', array());

        return parent::getPassword();
    }

    /**
     * {@inheritDoc}
     */
    public function setBasedn($basedn)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBasedn', array($basedn));

        return parent::setBasedn($basedn);
    }

    /**
     * {@inheritDoc}
     */
    public function getBasedn()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBasedn', array());

        return parent::getBasedn();
    }

    /**
     * {@inheritDoc}
     */
    public function setUsername($username)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUsername', array($username));

        return parent::setUsername($username);
    }

    /**
     * {@inheritDoc}
     */
    public function getUsername()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUsername', array());

        return parent::getUsername();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', array($name));

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', array());

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setSurname($surname)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSurname', array($surname));

        return parent::setSurname($surname);
    }

    /**
     * {@inheritDoc}
     */
    public function getSurname()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSurname', array());

        return parent::getSurname();
    }

    /**
     * {@inheritDoc}
     */
    public function setEmail($email)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEmail', array($email));

        return parent::setEmail($email);
    }

    /**
     * {@inheritDoc}
     */
    public function getEmail()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEmail', array());

        return parent::getEmail();
    }

    /**
     * {@inheritDoc}
     */
    public function addUser(\SIGE\SecurityManagerBundle\Entity\Usuario $user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addUser', array($user));

        return parent::addUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function removeUser(\SIGE\SecurityManagerBundle\Entity\Usuario $user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeUser', array($user));

        return parent::removeUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function getUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUser', array());

        return parent::getUser();
    }

}
